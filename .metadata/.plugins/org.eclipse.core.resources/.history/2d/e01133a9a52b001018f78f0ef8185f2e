package com.example.demo.controllers;

import java.time.LocalDateTime;
import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.services.RecetaService;
import com.example.demo.dtos.RecetaIngredienteDTO;
import com.example.demo.models.Receta;
import com.example.demo.models.RecetaIngrediente;
import com.example.demo.models.Usuario;

@RestController
@RequestMapping("/recetas")
public class RecetaController {
	@Autowired
	RecetaService recetaService;
	
	@PostMapping("/subir")
	public ResponseEntity<?> subirReceta(@RequestParam Long usuarioId, @RequestBody Receta receta) {
	    try {
	        Receta nuevaReceta = recetaService.subirReceta(usuarioId, receta.getNombre(), receta.getDescripcion(), receta.getPorciones(), receta.getTipo());
	        return new ResponseEntity<>(nuevaReceta, HttpStatus.CREATED);
	    } catch (IllegalArgumentException e) {
	        return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
	    }
	}
	@GetMapping("/buscar")
	public ResponseEntity<?> buscarRecetasPorNombre(@RequestParam String nombre) {
	    List<Receta> recetas = recetaService.buscarPorNombre(nombre);
	    return new ResponseEntity<>(recetas, HttpStatus.OK);
	}
	@GetMapping("/{id}")
	public ResponseEntity<?> getRecetaPorId(@PathVariable Long id) {
	    try {
	        Receta receta = recetaService.obtenerRecetaPorId(id);
	        return ResponseEntity.ok(receta);
	    } catch (NoSuchElementException e) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
	    }
	}
	@GetMapping("/tipo/{tipo}")
	public ResponseEntity<?> buscarPorTipo(@PathVariable String tipo) {
	    List<Receta> recetas = recetaService.buscarPorTipo(tipo);
	    return ResponseEntity.ok(recetas);
	}
	
	@PostMapping("/agregar-ingrediente")
	public ResponseEntity<?> agregarIngrediente(@RequestBody RecetaIngredienteDTO dto) {
	    try {
	        RecetaIngrediente resultado = recetaService.agregarIngrediente(
	            dto.recetaId, dto.ingredienteId, dto.cantidad
	        );
	        return ResponseEntity.ok(resultado);
	    } catch (NoSuchElementException e) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
	    }
	}
	
	@GetMapping("/con-ingrediente")
	public ResponseEntity<?> recetasConIngrediente(@RequestParam String name) {
	    List<Receta> recetas = recetaService.buscarConIngrediente(name);
	    return recetas.isEmpty()
	        ? ResponseEntity.status(HttpStatus.NOT_FOUND).body("No se encontraron recetas con ese ingrediente.")
	        : ResponseEntity.ok(recetas);
	}

	@GetMapping("/recientes")
	public ResponseEntity<List<Receta>> obtenerRecientes() {
	    List<Receta> recetas = recetaService.obtenerRecetasMasRecientes();
	    return ResponseEntity.ok(recetas);
	}


}
